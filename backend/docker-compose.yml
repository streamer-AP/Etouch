version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: smart-device-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-smart_device}
      MYSQL_USER: ${MYSQL_USER:-smartdevice}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - smart-device-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: smart-device-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-smart_device}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - smart-device-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smart-device-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-device-network

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: smart-device-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-password}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - smart-device-network

  # MinIO Object Storage (S3 compatible)
  minio:
    image: minio/minio:latest
    container_name: smart-device-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - smart-device-network

  # API Gateway
  gateway:
    build:
      context: .
      dockerfile: ./apps/gateway/Dockerfile
    container_name: smart-device-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 3000
      MYSQL_HOST: mysql
      MONGODB_URI: mongodb://admin:password@mongodb:27017/smart_device?authSource=admin
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      RABBITMQ_URL: amqp://admin:password@rabbitmq:5672
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    ports:
      - "3000:3000"
    depends_on:
      - mysql
      - mongodb
      - redis
      - rabbitmq
    networks:
      - smart-device-network
    volumes:
      - ./logs:/app/logs

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./apps/auth-service/Dockerfile
    container_name: smart-device-auth
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      AUTH_SERVICE_PORT: 3001
      MYSQL_HOST: mysql
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    depends_on:
      - mysql
      - redis
    networks:
      - smart-device-network

  # Device Service
  device-service:
    build:
      context: .
      dockerfile: ./apps/device-service/Dockerfile
    container_name: smart-device-device
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DEVICE_SERVICE_PORT: 3003
      MONGODB_URI: mongodb://admin:password@mongodb:27017/smart_device?authSource=admin
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
    depends_on:
      - mongodb
      - redis
    networks:
      - smart-device-network

  # Content Service
  content-service:
    build:
      context: .
      dockerfile: ./apps/content-service/Dockerfile
    container_name: smart-device-content
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      CONTENT_SERVICE_PORT: 3004
      MYSQL_HOST: mysql
      MONGODB_URI: mongodb://admin:password@mongodb:27017/smart_device?authSource=admin
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-admin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-password123}
    depends_on:
      - mysql
      - mongodb
      - minio
    networks:
      - smart-device-network

  # Audio Service
  audio-service:
    build:
      context: .
      dockerfile: ./apps/audio-service/Dockerfile
    container_name: smart-device-audio
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      AUDIO_SERVICE_PORT: 3005
      RABBITMQ_URL: amqp://admin:password@rabbitmq:5672
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-password}
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-admin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-password123}
    depends_on:
      - rabbitmq
      - redis
      - minio
    networks:
      - smart-device-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smart-device-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
    networks:
      - smart-device-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: smart-device-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - smart-device-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: smart-device-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - smart-device-network

networks:
  smart-device-network:
    driver: bridge

volumes:
  mysql_data:
  mongodb_data:
  redis_data:
  rabbitmq_data:
  minio_data:
  prometheus_data:
  grafana_data: